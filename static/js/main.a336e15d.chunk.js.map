{"version":3,"sources":["components/SampleCard.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["SampleCard","state","className","style","margin","src","this","props","image","alt","name","year","info","aria-hidden","friend","React","Component","wrapperStyle","display","flexWrap","maxWidth","Cards","cards","id","map","card","key","padding","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a336e15d.chunk.js","sourcesContent":["import React from 'react';\n\nclass SampleCard extends React.Component {\n  state = {  }\n  render() { \n    return ( \n      <div className=\"ui card\" style={{ margin: '5px'}}>\n      <div className=\"image\"><img src={`https://i.pravatar.cc/300$? ${this.props.image}`} alt=\"avatar\"/></div>\n      <div className=\"content\">\n        <div className=\"header\">{this.props.name}</div>\n        <div className=\"meta\"><span className=\"date\">Joined in {this.props.year}</span></div>\n        <div className=\"description\">{this.props.info}</div>\n      </div>\n      <div className=\"extra content\">\n        <i aria-hidden=\"true\" className=\"user icon\"></i>\n        {this.props.friend} Friends\n      </div>\n    </div>\n     );\n  }\n}\n \nexport default SampleCard;","import React from 'react';\nimport SampleCard from './SampleCard';\n\nconst wrapperStyle = {\n  display: 'flex',\n  flexWrap: 'wrap',\n  maxWidth: '1200px',\n  margin: 'auto'\n}\nclass Cards extends React.Component {\n  state = { \n    cards: [\n      {\n        id: 1,\n        name: 'Jane',\n        year: 2015,\n        info: 'Jane is a musician living in Nashville.',\n        friend: 10,\n      },\n      {\n        id: 2,\n        name: 'Tom',\n        year: 2016,\n        info: 'Tom is a comedian living in Boston.',\n        friend: 30,\n      },\n      {\n        id: 3,\n        name: 'Joe',\n        year: 2018,\n        info: 'Joe is a teacher living in New York.',\n        friend: 27,\n      },\n      {\n        id: 4,\n        name: 'Amy',\n        year: 2020,\n        info: 'Amy is a freelandcer living in Portland.',\n        friend: 12,\n      },\n      {\n        id: 5,\n        name: 'Jay',\n        year: 2010,\n        info: 'Jay is a teacher living in Seatle.',\n        friend: 12,\n      },\n      {\n        id: 6,\n        name: 'Rob',\n        year: 2012,\n        info: 'Rob is a developer living in Portland.',\n        friend: 18,\n      },\n      {\n        id: 7,\n        name: 'Tam',\n        year: 2015,\n        info: 'Tam is a designer living in Vancouver.',\n        friend: 15,\n      },\n      {\n        id: 8,\n        name: 'Bob',\n        year: 2016,\n        info: 'Amy is a freelandcer living in Austin.',\n        friend: 12,\n      },\n    ]\n   }\n  render() { \n\n    return ( \n      <div style={wrapperStyle}>\n      {this.state.cards.map(card => (\n        <SampleCard key={card} image={card.id} name={card.name} year={card.year} info={card.info} friend={card.friend}/>\n      ))}\n      </div>\n\n     );\n  }\n}\n \nexport default Cards;","import React from 'react';\nimport Cards from './components/Cards';\n\nconst wrapperStyle = {\n  padding: '1rem'\n} \nfunction App() {\n  return (\n    <div className=\"ui fluid container\" style={wrapperStyle}>\n      <h2 className=\"ui header\">Active Users in the App</h2>\n      <p>\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.\n        Aenean massa strong. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur\n        ridiculus mus.\n      </p>\n      <Cards />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}